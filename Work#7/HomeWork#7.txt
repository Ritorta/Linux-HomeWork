# Урок 7. 

Результат

Текст команд, которые применялись при выполнении задания.
При наличии: часть конфигурационных файлов, которые решают задачу.
Скриншоты результата запуска контейнеров (веб-интерфейс).
Присылаем в формате текстового документа: задание и команды для решения (без вывода).
Формат — PDF (один файл на все задания).

## Задание

### 1. Установить в виртуальную машину или VDS Docker.
1.1 Настроить набор контейнеров через docker compose по инструкции
(https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-with-docker-compose-ru).
(Часть с настройкой certbot и HTTPS опустить, если у вас нет настоящего домена и белого IP.)

Выполнение:

fox@love-linux:~$ sudo apt install docker-compose
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
docker-compose is already the newest version (1.29.2-1).

fox@love-linux:~$ sudo apt install yamllint
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
yamllint is already the newest version (1.26.3-1).

fox@love-linux:~$ mkdir wordpress && cd wordpress
fox@love-linux:~/wordpress$ mkdir nginx-conf && cd nginx-conf
fox@love-linux:~/wordpress/nginx-conf$
fox@love-linux:~/wordpress/nginx-conf$ nano nginx.conf 

server {
        listen 80;
        listen [::]:80;

        server_name ritorta.com www.ritorta.com;

        index index.php index.html index.htm;

        root /var/www/html;

        location ~ /.well-known/acme-challenge {
                allow all;
                root /var/www/html;
        }

        location / {
                try_files $uri $uri/ /index.php$is_args$args;
        }

        location ~ \.php$ {
                try_files $uri =404;
                fastcgi_split_path_info ^(.+\.php)(/.+)$;
                fastcgi_pass wordpress:9000;
                fastcgi_index index.php;
                include fastcgi_params;
                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                fastcgi_param PATH_INFO $fastcgi_path_info;
        }

        location ~ /\.ht {
                deny all;
        }

        location = /favicon.ico {
                log_not_found off; access_log off;
        }
        location = /robots.txt {
                log_not_found off; access_log off; allow all;
        }
        location ~* \.(css|gif|ico|jpeg|jpg|js|png)$ {
                expires max;
                log_not_found off;
        }
}

fox@love-linux:~$ nano .env

MYSQL_ROOT_PASSWORD=your_root_password
MYSQL_USER=your_wordpress_database_user
MYSQL_PASSWORD=your_wordpress_database_password

fox@love-linux:~/wordpress$ nano .dockerignore

.env
.git
docker-compose.yml
.dockerignore

fox@love-linux:~$ nano docker-compose.yml

version: '3'

services:
  db:
    image: mysql:8.0
    container_name: db
    restart: unless-stopped
    env_file: .env
    environment:
      - MYSQL_DATABASE=wordpress
    volumes:
      - dbdata:/var/lib/mysql
    command: '--default-authentication-plugin=mysql_native_password'
    networks:
      - app-network
  wordpress:
    depends_on:
      - db
    image: wordpress:5.1.1-fpm-alpine
    container_name: wordpress
    restart: unless-stopped
    env_file: .env
    environment:
      - WORDPRESS_DB_HOST=db:3306
      - WORDPRESS_DB_USER=$MYSQL_USER
      - WORDPRESS_DB_PASSWORD=$MYSQL_PASSWORD
      - WORDPRESS_DB_NAME=wordpress
    volumes:
      - wordpress:/var/www/html
    networks:
      - app-network
  webserver:
    depends_on:
      - wordpress
    image: nginx:1.15.12-alpine
    container_name: webserver
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - wordpress:/var/www/html
      - ./nginx-conf:/etc/nginx/conf.d
      - certbot-etc:/etc/letsencrypt
    networks:
      - app-network
  certbot:
    depends_on:
      - webserver
    image: certbot/certbot
    container_name: certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - wordpress:/var/www/html
    command: certonly --webroot --webroot-path=/var/www/html
              --email meddesu@yandex.ru
              --agree-tos --no-eff-email
              --staging -d ritorta.com -d www.ritorta.com
volumes:
  certbot-etc:
  wordpress:
  dbdata:

networks:
  app-network:
    driver: bridge 

fox@love-linux:~$ yamllint docker-compose.yml
fox@love-linux:~$ sudo systemctl stop nginx
fox@love-linux:~$ sudo docker-compose up -d

Creating db ... done
Creating wordpress ... done
Starting webserver ... done
Creating certbot   ... done

fox@love-linux:~$ sudo docker-compose ps









### 2*. Запустить два контейнера, связанные одной сетью (используя документацию).
Первый контейнер БД (например, образ mariadb:10.8), второй контейнер — phpmyadmin.
Получить доступ к БД в первом контейнере через второй контейнер (веб-интерфейс phpmyadmin).

Выполнение:

